// The buildscript block defines dependencies in order for .gradle file evaluation.
// This is separate from application dependencies.
// See https://stackoverflow.com/questions/17773817/purpose-of-buildscript-block-in-gradle.
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:8.0.0'
        // Plugin `com.bmuschko:gradle-docker-plugin:8.0.0` transitively depends on jackson 2.10.3,
        // which is not binary compatible with jackson 2.14 that is used elsewhere.
        // This causes `NoSuchMethodError` exceptions while building.
        //
        // Dependency chain:
        // `com.bmuschko:gradle-docker-plugin:8.0.0` ->
        // `com.github.docker-java:docker-java-core:3.2.14` ->
        // `com.fasterxml.jackson.core:jackson-databind:2.10.3`
        //
        // As this is a third-party dependency, we cannot (without forking) update it to use a newer jackson version.
        // There is however a PR that was created to update this version to the latest jackson version:
        // https://github.com/docker-java/docker-java/pull/2056
        //
        // TODO: once oss has been inlined, revisit where the version of jackson is defined.
        classpath 'com.fasterxml.jackson.core:jackson-core:2.14.2'

        classpath 'org.codehaus.groovy:groovy-yaml:3.0.3'
    }
}

// Configure the gradle enterprise plugin to enable build scans. Enabling the plugin at the top of the settings file allows the build scan to record
// as much information as possible.
plugins {
    id "com.gradle.enterprise" version "3.4.1"
    id 'com.github.burrunan.s3-build-cache' version "1.5" 
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

enableFeaturePreview('VERSION_CATALOGS')
dependencyResolutionManagement {
    repositories {
        maven {
            url 'https://airbyte.mycloudrepo.io/public/repositories/airbyte-public-jars/'
        }
    }
    versionCatalogs {
        libs {
            from("io.airbyte:oss-catalog:dev-306f8fb5fb")
        }
    }
}

ext.isCiServer = System.getenv().containsKey("CI")

buildCache {
    remote(com.github.burrunan.s3cache.AwsS3BuildCache) {
        region = 'us-east-2'
        bucket = 'airbyte-buildcache'
        prefix = 'cloud-cache/'
        push = isCiServer
        // Credentials will be taken from  S3_BUILD_CACHE_... environment variables
        // anonymous access will be used if environment variables are missing
    }
}

rootProject.name = 'airbyte-cloud'

gradle.ext.ossBuild = 'airbyte'

include ':airbyte-bootloader-wrapped'
include ':airbyte-server-wrapped'
include ':billing'
include ':cloud-api'
include ':cloud-auth'
include ':cloud-bootloader'
include ':cloud-config:cloud-config-core'
include ':cloud-config:cloud-config-models'
include ':cloud-config:cloud-config-persistence'
include ':cloud-config:cloud-config-seed'
include ':cloud-db:lib'
include ':cloud-db:jooq'
include ':cloud-partner-api'
include ':cloud-partner-server'
include ':cloud-public-api-server'
include ':cloud-server'
include ':cloud-tests'
include ':cloud-tracking'
include ':cloud-webapp'
include ':cloud-workers'
include ':dbt-integration'

includeBuild("oss") {
    name = gradle.ossBuild
}
