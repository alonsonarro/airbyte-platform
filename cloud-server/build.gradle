plugins {
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations.all {
    // Temporary hack to avoid dependency conflicts
    exclude group: 'io.micronaut.aws'
    exclude group: 'io.micronaut.azure'
    exclude group: 'io.micronaut.cache'
    exclude group: 'io.micronaut.coherence'
    exclude group: 'io.micronaut.data'
    exclude group: 'io.micronaut.email'
    exclude group: 'io.micronaut.flyway'
    exclude group: 'io.micronaut.gcp'
    exclude group: 'io.micronaut.groovy'
    exclude group: 'io.micronaut.grpc'
    exclude group: 'io.micronaut.kafka'
    exclude group: 'io.micronaut.kotlin'
    exclude group: 'io.micronaut.kubernetes'
    exclude group: 'io.micronaut.liquibase'
    exclude group: 'io.micronaut.jaxrs'
    exclude group: 'io.micronaut.micrometer'
    exclude group: 'io.micronaut.microstream'
    exclude group: 'io.micronaut.mongodb'
    exclude group: 'io.micronaut.mqtt'
    exclude group: 'io.micronaut.openapi'
    exclude group: 'io.micronaut.oraclecloud'
    exclude group: 'io.micronaut.picocli'
    exclude group: 'io.micronaut.problem'
    exclude group: 'io.micronaut.r2dbc'
    exclude group: 'io.micronaut.reactor'
    exclude group: 'io.micronaut.redis'
    exclude group: 'io.micronaut.rxjava2'
    exclude group: 'io.micronaut.rxjava3'
    exclude group: 'io.micronaut.security'
    exclude group: 'io.micronaut.serde'
    exclude group: 'io.micronaut.servlet'
    exclude group: 'io.micronaut.spring'
    exclude group: 'io.micronaut.sql'
    exclude group: 'io.micronaut.test'
    exclude group: 'io.micronaut.testresources'
    exclude group: 'io.micronaut.tracing'
    exclude group: 'io.micronaut.views'
    exclude module: 'jakarta.ws.rs-api'
}

dependencies {
    implementation project(':billing')
    implementation project(':cloud-api')
    implementation project(':cloud-auth')
    implementation project(':cloud-config:cloud-config-core')
    implementation project(':cloud-config:cloud-config-models')
    implementation project(':cloud-config:cloud-config-persistence')
    implementation project(':cloud-db:lib')
    implementation project(':cloud-tracking')
    implementation project(':dbt-integration')

    implementation "io.airbyte:airbyte-api"
    implementation "io.airbyte:airbyte-commons"
    implementation "io.airbyte.airbyte-config:init"
    implementation "io.airbyte.airbyte-config:config-models"
    implementation "io.airbyte.airbyte-config:config-persistence"
    implementation "io.airbyte.airbyte-db:db-lib"
    implementation "io.airbyte:airbyte-json-validation"
    implementation "io.airbyte.airbyte-metrics:metrics-lib"
    implementation "io.airbyte.airbyte-persistence:job-persistence"
    implementation("io.airbyte:airbyte-commons-server") {
        exclude module: 'airbyte-workers'
    }

    implementation libs.apache.commons.lang
    implementation libs.commons.io
    implementation libs.jooq
    implementation libs.flyway.core
    implementation 'org.glassfish.hk2:hk2-api:2.6.1'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'com.google.firebase:firebase-admin:8.1.0'
    implementation 'com.sendgrid:sendgrid-java:4.0.1'
    implementation "com.stripe:stripe-java:20.102.0"
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.eclipse.jetty:jetty-server:9.4.31.v20200723'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.31.v20200723'
    implementation 'org.glassfish.jersey.core:jersey-common'
    implementation 'org.glassfish.jersey.core:jersey-server'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson'
    implementation 'org.glassfish.jersey.inject:jersey-hk2'

    testImplementation libs.spotbugs.annotations
    testImplementation 'org.mockito:mockito-inline:4.7.0'

    // This should be available transitively from airbyte-config, but our hack to exclude micronaut bundles
    // is also excluding this necessary dependency. So for now, declare it explicitly.
    // see https://github.com/airbytehq/airbyte/pull/17269 for some additional context
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation(libs.flyway.core) {
        force = true
    }
    implementation(libs.s3) {
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible with our current Helm setup
        force = true
    }
    implementation(libs.aws.java.sdk.s3) {
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible with our current Helm setup
        force = true
    }
}

application {
    mainClass = 'io.airbyte.cloud.server.CloudServerApp'
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

run {
    // default for running on local machine.
    environment "DATABASE_USER", env.DATABASE_USER
    environment "DATABASE_PASSWORD", env.DATABASE_PASSWORD
    // we map the docker pg db to port 5433 so it does not conflict with other pg instances.
    environment "DATABASE_URL", "jdbc:postgresql://localhost:5433/${env.DATABASE_DB}"
    environment "WORKSPACE_ROOT", env.WORKSPACE_ROOT
    environment "CONFIG_ROOT", "/tmp/airbyte_config"
    environment "TRACKING_STRATEGY", env.TRACKING_STRATEGY
    environment "AIRBYTE_VERSION", rootProject.ext.oss_version
    environment "AIRBYTE_ROLE", System.getenv('AIRBYTE_ROLE')
    environment "TEMPORAL_HOST", "localhost:7233"
}

tasks.named("buildDockerImage") {
    dependsOn copyGeneratedTar
}
